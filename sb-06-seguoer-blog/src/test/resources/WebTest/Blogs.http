### blog.index
GET     http://localhost:8080/blog
Accept: application/json

### blog.index page
GET     http://localhost:8080/blog?page=2&perpage=2
Accept: application/json

### blog.store
POST     http://localhost:8080/blog
Content-Type: application/json

{
    "id": 3,
    "title": "front-end",
    "creater": null,
    "cover": "img/front-end",
    "slug": "front-end-speedup",
    "creat_time": null,
    "update_time": 1694587173000,
    "user_id": 1,
    "content": "## 前端（front-end）\r\n\r\n### (一)  html\r\n\r\n#### 标签\r\n\r\n##### 1. a标签\r\n```html\r\n <a href=\"web.html\" target=\"_blank\">html basic</a> \r\n``` \r\ntarget上述属性为跳转到新页面\r\n\r\n\r\n##### 2. img标签  \r\n   <img src=\"../AU9$DES3K209A)FZ`GKJ.png\" alt=\"picture\">\r\n```html\r\n   <img src=\"../AU9$DES3K209A)FZ`GKJ.png\" alt=\"picture\">\r\n``` \r\nalt指访问不到的时候显示picture\r\n\r\n\r\n##### 3. br hr 以及 标题标签  \r\n   <br&gt;为换行标签，其中&lt;br />可以省略  \r\n   <hr&gt;为分割线 默认占满左右  \r\n   <h1&gt;&lt;/h1>为一级标题，从h1~h6有六级标题\r\n\r\n\r\n##### 4. list标签  \r\n```html\r\n<ul>\r\n <li>1</li>\r\n <li>2</li>\r\n <li>3</li>\r\n</ul>\r\n```\r\n   ul为无序标签，ol为有序标签，可以通过\r\n\r\n\r\n##### 5. table标签\r\n\r\n  <table>\r\n        <tr>\r\n            <td>1</td>\r\n            <td colspan=\"2\" align=\"center\">2</td>\r\n        </tr>\r\n        <tr>\r\n            <td>2</td>\r\n            <td>3</td>\r\n            <td rowspan=\"2\">4</td>\r\n        </tr>\r\n        <tr>\r\n            <td colspan=\"2\" align=\"center\">3</td>\r\n        </tr>\r\n    </table>\r\n\r\n代码为  \r\n```html\r\n<table>\r\n        <tr>\r\n            <td>1</td>\r\n            <td colspan=\"2\" align=\"center\">2</td>\r\n        </tr>\r\n        <tr>\r\n            <td>2</td>\r\n            <td>3</td>\r\n            <td rowspan=\"2\">4</td>\r\n        </tr>\r\n        <tr>\r\n            <td colspan=\"2\" align=\"center\">3</td>\r\n        </tr>\r\n    </table>\r\n```\r\n\r\n其中属性colspan为控制长度,rowspan为控制高度  \r\n**tr可以替换为th，th表示表头**\r\n##### 6. 不同字体标签  \r\n   <i&gt;斜体</i&gt;:<i>斜体</i>  \r\n   <del&gt;删除线</del&gt;:<del>删除线</del>   \r\n   b为粗体:   <b>粗体</b>  \r\n   u为下划线:   <u>下划线</u>  \r\n   上标sup:<sup>2</sup>下标sup:<sub>1</sub>\r\n\r\n##### 7. 更多标签  \r\n如无语意p标签，div标签等等，更多待补充\r\n\r\n### (二)  css \r\ncss主要有两大属性：选择器，属性  \r\n引入css有两种方法：如下（均是在html页面title标签后加标签）  \r\n(1）直接在html加入style标签，然后写选择器和属性 （2）加link标签引入外部css\r\n```css\r\n.number{\r\n   background: #6f42c1;\r\n}\r\n```\r\n#### 1. 选择器  \r\n上述代码中的.number为选择器中的一种，所以下面介绍一下选择器\r\n\r\n选择器有不同筛选方法，下面是三种主要的选择器\r\n```css\r\n元素选择器\r\np{ /* 选择所有P标签元素  */}\r\n类选择器\r\n.cot{ /*选择标签属性class为cot的所有元素*/}\r\nID选择器\r\n#isad{ /* 选择所有标签属性id为isad的所有元素 */}\r\n```\r\n#### 更多选择器  \r\n##### （I）后代选择器\r\n```css\r\n        div > * {\r\n    color: #000FFF;\r\n}选择div的后一代所有元素\r\n```\r\n##### (II)子元素选择器\r\n```css\r\n div * {\r\n            color: #000FFF;\r\n        }选择div元素的所有子元素\r\n```\r\n##### (III)相邻兄弟选择器\r\n```css\r\n p + a{\r\n            color: #FFF000;\r\n        }选择p元素相邻的下一个同级的a元素，只选p后面的\r\n```\r\n##### (IIII)普通兄弟选择器\r\n```css\r\np ~ a{\r\n            color: #FFF000;\r\n        }选择p元素相邻的下几个同级的a元素，只选p后面的\r\n```\r\n\r\n#### 2. 属性（以flex运用举例）\r\n```css\r\n#contentor{\r\n    border: 1px ;\r\n    height: 100%;\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: row;\r\n    /* row-reverse从右往左  row从左往右  column从上往下  column-reverse从下往上 */\r\n   flex-wrap: wrap-reverse;\r\n   /* wrap按顺序换行 nowrap不换行 */\r\n}\r\n\r\n#item{\r\n   margin: 20px;\r\n   border: 1px solid;\r\n   height: 200px;\r\n   width:200px;\r\n   background-color: aqua;\r\n   display: flex;\r\n   justify-content: center;\r\n   /* start左对齐 end 右对齐 center居中 space-between两端对齐 space-around间隔相等*/\r\n   align-items: center;\r\n   /* align-items: start; 顶部对齐*/\r\n   /* align-items: end;底部对齐 */\r\n   /* align-items: center;中点对齐 */\r\n   /* align-items: stretch;自动填充满 */\r\n   background-image: url(..);\r\n   /* 背景图片*/\r\n}\r\n```\r\n```css\r\n#contentor{\r\n    border: 1px ;\r\n    height: 100%;\r\n    width: 100%;\r\n    display: flex;\r\n    flex-flow: row-reverse;\r\n    /* 是flex-direction和flex-wrap属性的简写形式（默认值为row nowrap） */\r\n}\r\n```\r\n\r\n更多已经设置好的css样式，可以在 <a href=\"https://icons.getbootstrap.com/\">Bootstrap</a>中查看\r\n\r\n动画转换<a href=\"https://animate.style/\">animate</a>\r\n### (三)  JavaScript(俗称JS)\r\n#### JS BOM对象\r\n##### 1. 系统对话框\r\n```html\r\n<!doctype html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\"\r\n          content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\r\n    <title>系统对话框</title>\r\n</head>\r\n<body>\r\n<button type=\"button\" onclick=\"testAlert()\">消息框</button>\r\n<button type=\"button\" onclick=\"testPrompt()\">输入框</button>\r\n<button type=\"button\" onclick=\"testConfirm()\">确认框</button>\r\n</body>\r\n<script type=\"text/javascript\">\r\n    // 1）消息框:alert， 常用。\r\n    function testAlert(){\r\n        alert(\"原神，启动！\");\r\n        console.log(\"你好...\");\r\n    }\r\n\r\n    // 2）输入框:prompt，返回提示框中的值\r\n    function testPrompt(){\r\n        var uname = window.prompt(\"请输入用户名：\",\"\");\r\n        console.log(uname);\r\n    }\r\n\r\n    // 3）确认框:confirm，返回 true/false.\r\n    function testConfirm() {\r\n        var flag = confirm(\"您确认要删除该记录吗？\");\r\n        if (flag) {\r\n            alert(\"删除成功！\");\r\n        } else {\r\n            alert(\"没事别瞎点...\");\r\n        }\r\n    }\r\n\r\n\r\n</script>\r\n</html>\r\n```\r\n##### 2. 打开窗口\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n  <meta charset=\"utf-8\">\r\n  <title>打开窗口</title>\r\n</head>\r\n<body>\r\n<button type=\"button\" id=\"btn1\">打开窗口</button>\r\n</body>\r\n<!--\r\n    打开窗口\r\n        window.open()方法既可以导航到一个特定的URL也可以用来打开一个新的窗口\r\n -->\r\n<script type=\"text/javascript\">\r\n\r\n  document.getElementById(\"btn1\").onclick = function(){\r\n    // 打开空白窗口\r\n    // window.open();\r\n    // 打开指定页面\r\n    // window.open(\"01-系统对话框.html\");\r\n    // 打开百度\r\n    // window.open(\"http://www.baidu.com\");\r\n    // 指定方式打开页面\r\n    window.open(\"http://www.baidu.com\",\"_self\");\r\n    // 打开页面\r\n    //window.open(\"03-关闭窗口.html\");\r\n  }\r\n</script>\r\n</html>\r\n```\r\n##### 3. 关闭窗口\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n  <meta charset=\"utf-8\">\r\n  <title>关闭窗口</title>\r\n</head>\r\n<body>\r\n<button type=\"button\" onclick=\"test()\">关闭窗口</button>\r\n</body>\r\n<script type=\"text/javascript\">\r\n  function test(){\r\n    window.close();\r\n  }\r\n</script>\r\n</html>\r\n```\r\n##### 4. 时间函数\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n  <meta charset=\"utf-8\">\r\n  <title>时间函数</title>\r\n</head>\r\n<body>\r\n<button type=\"button\" onclick=\"toBaidu()\">3秒钟后跳转到百度</button>\r\n<hr>\r\n<button type=\"button\" onclick=\"init()\">开始</button>\r\n<button type=\"button\" onclick=\"stop()\">暂停</button>\r\n<h2 id=\"time\"></h2>\r\n<hr>\r\n<button type=\"button\" onclick=\"hello()\">定时执行</button>\r\n</body>\r\n<!--\r\n    setTimeout()\r\n            setTimeout() : 在指定的毫秒数后调用函数或计算表达式。返回一个唯一的标识；\r\n        也可以通过返回的标识cliearTimeout(id)： 来清除指定函数的执行。\r\n\r\n        var id = setTimeout(function,times);\r\n            参数1：执行的函数\r\n            参数2：时间，单位毫秒\r\n\r\n    setInteval()\r\n            setInterval():可按照指定的周期（以毫秒计）来调用函数或计算表达式，也可根据返回的标识用来结束。\r\n        该方法会不停地调用函数，直到 clearInterval() 被调用或窗口被关闭。\r\n\r\n        var id = setInteval(function,times);\r\n            参数1：执行的函数\r\n            参数2：时间，单位毫秒\r\n -->\r\n<script type=\"text/javascript\">\r\n\r\n\r\n  /* setTimeout(function(){\r\n      console.log(\"3秒钟后执行的程序...\");\r\n  },3000); */\r\n\r\n  // 3秒钟后跳转到百度\r\n  function toBaidu() {\r\n    setTimeout(test, 3000);\r\n  }\r\n\r\n  function test() {\r\n    // 打开百度\r\n    window.open(\"http://www.baidu.com\");\r\n  }\r\n\r\n  console.log(new Date().toLocaleTimeString());\r\n\r\n  var id;\r\n\r\n  function init() {\r\n\r\n    var time = new Date().toLocaleTimeString();\r\n\r\n    // 将时间赋值给h2标签\r\n    document.getElementById(\"time\").innerHTML = time;\r\n\r\n    // 每一秒钟调用一下\r\n    id = setTimeout(init, 1000);\r\n  }\r\n\r\n  function stop() {\r\n    clearTimeout(id);\r\n  }\r\n\r\n\r\n  // 定时执行\r\n  function hello() {\r\n    setInterval(function () {\r\n      console.log(\"你好...\");\r\n    }, 1000);\r\n  }\r\n\r\n\r\n</script>\r\n</html>\r\n```\r\n\r\n##### 5. history对象  \r\n   (I)\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n  <meta charset=\"utf-8\">\r\n  <title>history对象</title>\r\n</head>\r\n<body>\r\n<h2>页面1</h2>\r\n<a href=\"5-history对象-2.html\">页面2</a>\r\n<hr >\r\n<button type=\"button\" onclick=\"window.history.go(2)\">前进2</button>\r\n</body>\r\n<!--\r\n    history对象的属性：length，返回浏览器历史列表中的 URL 数量。\r\n\r\n         history对象的方法：\r\n             back()：\r\n            加载 history 列表中的前一个 URL。\r\n             forward()：\r\n            加载历史列表中的下一个 URL。当页面第一次访问时，还没有下一个url。\r\n             go(number|URL):\r\n            URL 参数使用的是要访问的 URL。而 number 参数使用的是要访问的 URL 在 History 的 URL 列表中的相对位置。go(-1)，到上一个页面\r\n -->\r\n<script type=\"text/javascript\">\r\n  console.log(window.history.length);\r\n\r\n</script>\r\n</html>\r\n```\r\n(III)\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n  <meta charset=\"utf-8\">\r\n  <title>history对象</title>\r\n</head>\r\n<body>\r\n<h2>页面2</h2>\r\n<a href=\"5-history对象-3.html\">页面3</a>\r\n<hr />\r\n<button type=\"button\" onclick=\"window.history.forward();\">前进</button>\r\n<button type=\"button\" onclick=\"window.history.back()\">后退</button>\r\n</body>\r\n<!--\r\n    history对象的属性：length，返回浏览器历史列表中的 URL 数量。\r\n\r\n         history对象的方法：\r\n             back()：\r\n            加载 history 列表中的前一个 URL。\r\n             forward()：\r\n            加载历史列表中的下一个 URL。当页面第一次访问时，还没有下一个url。\r\n             go(number|URL):\r\n            URL 参数使用的是要访问的 URL。而 number 参数使用的是要访问的 URL 在 History 的 URL 列表中的相对位置。go(-1)，到上一个页面\r\n -->\r\n<script type=\"text/javascript\">\r\n  console.log(window.history.length);\r\n\r\n</script>\r\n</html>\r\n```\r\n(III)\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n  <meta charset=\"utf-8\">\r\n  <title>history对象</title>\r\n</head>\r\n<body>\r\n<h2>页面3</h2>\r\n<button type=\"button\" onclick=\"window.history.back()\">后退</button>\r\n</body>\r\n<!--\r\n    history对象的属性：length，返回浏览器历史列表中的 URL 数量。\r\n\r\n         history对象的方法：\r\n             back()：\r\n            加载 history 列表中的前一个 URL。\r\n             forward()：\r\n            加载历史列表中的下一个 URL。当页面第一次访问时，还没有下一个url。\r\n             go(number|URL):\r\n            URL 参数使用的是要访问的 URL。而 number 参数使用的是要访问的 URL 在 History 的 URL 列表中的相对位置。go(-1)，到上一个页面\r\n -->\r\n<script type=\"text/javascript\">\r\n  console.log(window.history.length);\r\n\r\n</script>\r\n</html>\r\n```\r\n##### 6. location对象\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"utf-8\">\r\n    <title>location对象</title>\r\n</head>\r\n<body>\r\n<button type=\"button\" onclick=\"test()\">跳转</button>\r\n<button type=\"button\" onclick=\"test1()\">replace</button>\r\n<button type=\"button\" onclick=\"test2()\">reload</button>\r\n</body>\r\n<!--\r\n        location 对象的属性\r\n            href：设置或返回完整的 URL\r\n\r\n            location对象的方法\r\n                reload()：重新加载当前文档。\r\n                replace()：用新的文档替换当前文档。(不能后退)\r\n -->\r\n<script type=\"text/javascript\">\r\n\r\n    // 获取当前访问的URL\r\n    var url = window.location.href;\r\n    console.log(url);\r\n\r\n    function test(){\r\n        // 设置URL  页面跳转\r\n        // window.location.href = \"01-系统对话框.html\";\r\n        window.location.href = \"http://www.baidu.com\";\r\n    }\r\n\r\n    /**\r\n     * replace()：用新的文档替换当前文档。(不能后退)\r\n     */\r\n    function test1(){\r\n        window.location.replace(\"01-系统对话框.html\");\r\n    }\r\n    /**\r\n     * reload()：重新加载当前文档。\r\n     */\r\n    function test2(){\r\n        window.location.reload();\r\n    }\r\n\r\n</script>\r\n</html>\r\n```\r\n\r\n\r\n#### JS事件\r\n##### 1. 事件\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<!--\r\n\t\tload加载事件：\r\n\t\t\t当页面加载完毕后执行的事件\r\n\r\n\t\t常用事件：\r\n\t\t\tonload：当页面加载完后立即触发\r\n\t\t\tonblur：元素失去焦点\r\n\t\t\tonfocus：元素获得焦点\r\n\t\t\tonclick：鼠标点击某个对象\r\n\t\t\tonchange：用户改变***的内容\r\n\t\t\tonmouseover：鼠标移动到某个元素上\r\n\t\t\tonmouseout：鼠标从某个元素上离开\r\n\t\t\tonkeyup：某个键盘的键被松开\r\n\t\t\tonkeydown：某个键盘的键被按下\r\n\t\t事件流：\r\n\t\t\t接收事件的顺序\r\n\t\t事件流的顺序：事件冒泡和事件捕获\r\n\t\t事件冒泡（从小到大）\r\n\t\t\t事件开始时由最具体的元素接受，然后逐级向上传播到较为不具体的节点（文档）\r\n\t\t事件捕获（从大到小）\r\n\t\t\t事件开始时由document对象接受，然后逐级向下传播到具体的节点\r\n\r\n\t -->\r\n<body onload=\"loadWindows()\">\r\n\r\n</body>\r\n<script type=\"text/javascript\">\r\n\r\n    function loadWindows() {\r\n        console.log(\"加载...\");\r\n    }\r\n\r\n</script>\r\n</html>\r\n```\r\n\r\n##### 2. 事件处理\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"utf-8\">\r\n    <title>事件处理程序</title>\r\n</head>\r\n<body>\r\n<!-- 1. HTML事件处理程序 -->\r\n<button type=\"button\" onclick=\"alert('Hello')\" onmouseout=\"test()\">按钮</button>\r\n<!-- 2. DOM 0级事件处理程序 -->\r\n<button type=\"button\" id=\"btn\">DOM 0级事件处理程序</button>\r\n<!-- 3. DOM 2级事件处理程序 -->\r\n<button type=\"button\" id=\"btn2\">DOM 2级事件处理程序</button>\r\n</body>\r\n<!--\r\n     事件处理程序\r\n        响应某个事件的函数就叫做事件处理程序（或事件侦听器）。事件处理程序的名字以“on”开头\r\n        1. HTML事件处理程序\r\n        2. DOM 0级事件处理程序\r\n            将一个函数赋值给一个事件处理程序属性\r\n            只能为同一个元素的同一个事件设定一个事件程序（覆盖）\r\n        3. DOM 2级事件处理程序\r\n            addEventListener()  和  removeEventListener()\r\n            有三个参数：\r\n                参数1：事件名\r\n                参数2：处理事件的函数\r\n                参数3：事件冒泡（false）或捕获（true）\r\n            可以为同一个元素的同一个事件设定多个事件程序\r\n\r\n\r\n    document.getElementById(\"id属性值\"); 通过id属性值获取元素对象\r\n\r\n -->\r\n<script type=\"text/javascript\">\r\n    function test(){\r\n        console.log('鼠标移开了...');\r\n    }\r\n\r\n    /**\r\n     * 加载事件\r\n     * \t当页面上的标签和引入的资源加载完毕后，才会执行的方法\r\n     */\r\n    window.onload = function(){\r\n        // 通过id属性值获取按钮对象\r\n        var btn = document.getElementById(\"btn\");\r\n        console.log(btn);\r\n        // 给指定元素绑定点击事件\r\n        btn.onclick = function(){\r\n            console.log(\"DOM 0级事件处理程序...\");\r\n        }\r\n        btn.onclick = function(){\r\n            console.log(\"test...\");\r\n        }\r\n    }\r\n\r\n    // DOM 2级事件\r\n    var btn2 = document.getElementById(\"btn2\");\r\n    // 给按钮绑定事件监听\r\n    btn2.addEventListener('click',function(){\r\n        console.log(\"DOM 2级事件...\");\r\n    });\r\n    btn2.addEventListener('click',fn);\r\n    function fn(){\r\n        console.log(\"按钮被点击了...\");\r\n    }\r\n    // 移除事件\r\n    btn2.removeEventListener(\"click\",fn);\r\n\r\n</script>\r\n\r\n</html>\r\n```\r\n##### 3. 常用时间\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"utf-8\">\r\n    <title>常用事件</title>\r\n</head>\r\n<body>\r\n姓名：<input type=\"text\" id=\"uname\" >\r\n<button type=\"button\" onclick=\"clickBtn()\">按钮</button>\r\n<hr >\r\n城市：<select id=\"city\">\r\n    <option>请选择城市</option>\r\n    <option>上海</option>\r\n    <option>北京</option>\r\n</select>\r\n<hr >\r\n<div id=\"div1\">\r\n    这是一个div\r\n</div>\r\n</body>\r\n<!--\r\n    常用事件：\r\n        onload：当页面加载完后立即触发\r\n        onblur：元素失去焦点\r\n        onfocus：元素获得焦点\r\n        onclick：鼠标点击某个对象\r\n        onchange：用户改变***的内容\r\n        onmouseover：鼠标移动到某个元素上\r\n        onmouseout：鼠标从某个元素上离开\r\n        onkeyup：某个键盘的键被松开\r\n        onkeydown：某个键盘的键被按下\r\n -->\r\n<script type=\"text/javascript\">\r\n    // onload：当页面或图像加载完后立即触发\r\n    window.onload = function(){\r\n        console.log(\"页面加载完毕...\");\r\n    }\r\n    var uname = document.getElementById(\"uname\");\r\n    // onblur：元素失去焦点\r\n    uname.onblur = function(){\r\n        console.log(\"文本框失去焦点...\");\r\n    }\r\n    // onfocus：元素获得焦点\r\n    uname.onfocus = function(){\r\n        console.log(\"文本框获得焦点...\");\r\n    }\r\n    // onclick：鼠标点击某个对象\r\n    function clickBtn(){\r\n        console.log(\"按钮被点击了...\");\r\n    }\r\n    // onchange：用户改变域的内容\r\n    document.getElementById(\"city\").onchange = function(){\r\n        console.log(\"下拉框的值改变了...\");\r\n    }\r\n\r\n    var div1 = document.getElementById(\"div1\");\r\n    // onmouseover：鼠标移动到某个元素上\r\n    div1.onmouseover = function(){\r\n        console.log(\"鼠标悬停...\");\r\n    }\r\n    // onmouseout：鼠标从某个元素上离开\r\n    div1.onmouseout = function(){\r\n        console.log(\"鼠标移开...\");\r\n    }\r\n\r\n    // \tonkeyup：某个键盘的键被松开\r\n    uname.onkeydown = function(){\r\n        console.log(\"按键按下...\");\r\n    }\r\n    // \tonkeydown：某个键盘的键被按下\r\n    uname.onkeyup = function(){\r\n        console.log(\"按键弹起...\");\r\n    }\r\n</script>\r\n</html>\r\n```",
    "content_type": "md",
    "reading_time": 0
  }

### blog.delete
DELETE http://localhost:8080/blog/0
Content-Type: application/json

### blog.show
GET http://localhost:8080/blog/3
Content-Type: application/json